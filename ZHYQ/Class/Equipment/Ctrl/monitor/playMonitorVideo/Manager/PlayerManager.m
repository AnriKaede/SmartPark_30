////  PlayerManager.m//  DemoDPSDK////  Created by dahua on 15-4-3.//  Copyright (c) 2015年 jiang_bin. All rights reserved.//#import "PlayerManager.h"#import "TalkManager.h"#import "DPSDK_Core_Define.h"#import "DHDataCenter.h"static PlayerManager* g_shareInstance = nil;@interface PlayerManager(){    void* pCallBackFun;    AudioUserParam_t* pUserParam;    dpsdk_audio_type_e  audioType_;         /**< 对讲音频类型 */}@end@implementation PlayerManager+ (PlayerManager *) sharedInstance{    static dispatch_once_t onceToken;    dispatch_once(&onceToken, ^{        g_shareInstance = [[self alloc] init];    });    return g_shareInstance;}void audioCallFunction(unsigned char* pDataBuffer,                       unsigned long DataLength,                       void* pUserData){    [[TalkManager sharedInstance]onAudioCallFunction:pDataBuffer dataLen:DataLength userData:pUserData];}- (long)getFreePort{    long iPort = -1;    PLAY_GetFreePort(&iPort);    return iPort;}- (BOOL)startRealPlay:(long)iPort window:(void *)hWnd{    if(_isPlaying == false)    {        _isPlaying = true;    }    BOOL bRet = PLAY_OpenStream(iPort, Nil, 0, 2000*1024);    bRet = PLAY_Play(iPort, hWnd);    return bRet;}- (BOOL)startRecordPlay:(long)iPort window:(void *)hWnd{    BOOL bRet = PLAY_SetStreamOpenMode(iPort, STREAME_FILE);    PLAY_SetDecodeThreadNum(iPort, 4);    bRet = PLAY_OpenStream(iPort, Nil, 0, 2000*1024);    bRet = PLAY_Play(iPort, hWnd);    bRet = PLAY_PlaySoundShare(iPort);    return bRet;}- (BOOL)startTalk:(long)iPort bVtoTalk:(BOOL)bVto{    BOOL bRet = PLAY_OpenStream(iPort, NULL, 0, 2000*1024);    bRet = PLAY_Play(iPort, NULL);    bRet = PLAY_PlaySound(iPort);    bRet = PLAY_OpenAudioRecord(audioCallFunction, Talk_Audio_Bits_16, Talk_Audio_Sam_8K, 1024, 0, (__bridge void*)self);    [[TalkManager sharedInstance] getAudioSendCallback:bVto];    return bRet;}/** 打开声音采样 */- (void)openAudioSample{//    DPSDK_GetAudioSendFunCallBack(	[DHDataCenter sharedInstance]->nDPHandle_,//                                                             pCallBackFun, //                                                            pUserParam);//           //只有在DPSDK成功取得对讲码流后,才打开采样//        PLAY_OpenAudioRecord((pCallFunction)audioSampleCallback,//                             Talk_Audio_Bits_16,//                             Talk_Audio_Sam_8K,//                             1024,//                             1024,//                             (__bridge void *)(self));//        audioType_ = (dpsdk_audio_type_e)[VideoIntercomManager sharedInstance].m_VtCallInfo->nAudioType;}- (BOOL)stopRealPlay:(long)iPort{    if(_isPlaying == true)    {        _isPlaying = false;    }    BOOL bRet = PLAY_Stop(iPort);    bRet = PLAY_StopSoundShare(iPort);    bRet = PLAY_CloseStream(iPort);    bRet = PLAY_ReleasePort(iPort);    return bRet;}- (BOOL)stopRecordPlay:(long)iPort{    BOOL bRet = PLAY_Stop(iPort);    bRet = PLAY_StopSoundShare(iPort);    bRet = PLAY_CloseStream(iPort);    bRet = PLAY_ReleasePort(iPort);    return  bRet;}- (BOOL)stopTalk:(long)iPort{    BOOL bRet;    PLAY_CloseStream(iPort);    bRet = PLAY_Stop(iPort);    bRet = PLAY_StopSound();    PLAY_ResetSourceBuffer(iPort);    bRet = PLAY_CloseAudioRecord();    bRet = PLAY_ReleasePort(iPort);    return bRet;}- (BOOL)setPlaySpeed:(float) speed withPort:(long)iPort{    BOOL ret =  PLAY_SetPlaySpeed(iPort, speed);    return ret;}- (BOOL)resetBuffer:(long)iPort{    BOOL ret;   ret = PLAY_ResetBuffer(iPort, BUF_VIDEO_SRC);   ret = PLAY_ResetBuffer(iPort, BUF_AUDIO_SRC);   ret = PLAY_ResetBuffer(iPort, BUF_VIDEO_RENDER);   ret = PLAY_ResetBuffer(iPort, BUF_AUDIO_RENDER);    return ret;}- (BOOL)openVoice:(long)iPort{    BOOL  bRet = PLAY_PlaySoundShare(iPort);    return bRet;}- (BOOL)closeVoice:(long)iPort{    BOOL  bRet = PLAY_StopSoundShare(iPort);    return bRet;}@end