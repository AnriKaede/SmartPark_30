////  PreviewManager.m//  DemoDPSDK////  Created by jiang_bin on 14-4-21.//  Copyright (c) 2014年 jiang_bin. All rights reserved.//#import "PreviewManager.h"#import "PlayerManager.h"#import "DHVideoWnd.h"static PreviewManager* g_shareInstance = nil;static long iRealplayPort = -1;static long iRecordPort = -1;static int32_t nRealSeq_ = 0;  /**< 码流请求序号 */static int32_t nRecordSeq = 0;  /**< 码流请求序号 */@interface PreviewManager()//上一次打开摄像头id@property (nonatomic,strong) NSString *prechannelID;@end@implementation PreviewManager+ (PreviewManager *) sharedInstance{    static dispatch_once_t onceToken;    dispatch_once(&onceToken, ^{        g_shareInstance = [[self alloc] init];    });    return g_shareInstance;}int32_t  mediaCallback( IN int32_t nPDLLHandle,                        IN int32_t nSeq,                        IN int32_t nMediaType,                        IN const char* szNodeId,                        IN int32_t nParamVal,                        IN char* szData,                        IN int32_t nDataLen,                        IN void* pUserParam ){    if(nSeq == nRealSeq_){        PLAY_InputData(iRealplayPort, (unsigned char *)szData, nDataLen);    }    if(nSeq == nRecordSeq){        PLAY_InputData(iRecordPort, (unsigned char *)szData, nDataLen);    }    return 0;}-(void) initData{    _prechannelID = @"";}- (int)openRealPlay:(void *)hWnd{    if(nRealSeq_ != 0)    {        //说明当前正在播放视频        return -1;    }    Get_RealStream_Info_t streamInfo = {0};    if ([_prechannelID isEqualToString:@""])    {        strcpy(streamInfo.szCameraId, [[DHDataCenter sharedInstance].channelID UTF8String]);    }    else    {        strcpy(streamInfo.szCameraId, [_prechannelID UTF8String]);    }    streamInfo.nRight = DPSDK_CORE_NOT_CHECK_RIGHT;    streamInfo.nStreamType = DPSDK_CORE_STREAMTYPE_MAIN;    streamInfo.nMediaType  = DPSDK_CORE_MEDIATYPE_ALL;    streamInfo.nTransType  = DPSDK_CORE_TRANSTYPE_TCP;        int nRet = DPSDK_GetRealStream([DHDataCenter sharedInstance]->nDPHandle_,                                   &nRealSeq_,                                   &streamInfo,                                   mediaCallback,                                   nil,                                   5000);    if (0 == nRet)    {        //纪录当前播放的摄像头id        _prechannelID = [DHDataCenter sharedInstance].channelID;        //调用playsdk进行实时播放        iRealplayPort = [[PlayerManager sharedInstance]getFreePort];        [[PlayerManager sharedInstance]startRealPlay:iRealplayPort window:hWnd];       // PLAY_PlaySound(kRealplayPort);        NSLog(@"###open realplay succeed.");    }    return nRet;}- (int)pauseRealPlay:(BOOL)paused{    return PLAY_Pause(iRealplayPort, paused);}- (int)stopRealPlay{    int nRet = DPSDK_CloseRealStreamBySeq([DHDataCenter sharedInstance]->nDPHandle_,                                         nRealSeq_,                                         5000);    [[PlayerManager sharedInstance]stopRealPlay:iRealplayPort];    nRealSeq_ = 0;        if (nRet == 0)    {        NSLog(@"####Stop realplay succeed.");    }    else    {        NSLog(@"####Stop realplay failed.");    }    return nRet;}- (BOOL)openVoice{    BOOL nret = [[PlayerManager sharedInstance]openVoice:iRealplayPort];    return nret;}- (BOOL)closeVoice{    BOOL nret = [[PlayerManager sharedInstance] closeVoice:iRealplayPort];    return nret;}- (BOOL)beginRecord{    NSString* strMediaCenterPath = nil;        NSString *documentsDirectory = [DHPubfun documentFolder];    strMediaCenterPath = [documentsDirectory stringByAppendingPathComponent:@"Media"];        NSDateFormatter *format = [[NSDateFormatter alloc] init];    [format setDateFormat:@"yyyyMMdd"];    NSString* localString = [format stringFromDate:[NSDate date]];        // 日期    NSFileManager* fileManage = [NSFileManager defaultManager];    NSError* pError;    [fileManage createDirectoryAtPath:strMediaCenterPath withIntermediateDirectories:YES attributes:nil error:&pError];    NSString* strCapturePath = [strMediaCenterPath stringByAppendingPathComponent:localString];    [fileManage createDirectoryAtPath:strCapturePath withIntermediateDirectories:YES attributes:nil error:&pError];    [format setDateFormat:@"yyyyMMddHHmmssSSS"];    localString = [format stringFromDate:[NSDate date]];    NSString* strFileName = [NSString stringWithFormat:@"%s.avi", [localString UTF8String]];    NSString* strFilePath = [strCapturePath stringByAppendingPathComponent:strFileName] ;        Get_RealStream_Info_t streamInfo = {0};    if ([_prechannelID isEqualToString:@""])    {        strcpy(streamInfo.szCameraId, [[DHDataCenter sharedInstance].channelID UTF8String]);    }    else    {        strcpy(streamInfo.szCameraId, [_prechannelID UTF8String]);    }    streamInfo.nRight = DPSDK_CORE_NOT_CHECK_RIGHT;    streamInfo.nStreamType = DPSDK_CORE_STREAMTYPE_MAIN;    streamInfo.nMediaType  = DPSDK_CORE_MEDIATYPE_ALL;    streamInfo.nTransType  = DPSDK_CORE_TRANSTYPE_TCP;        int nRet = DPSDK_GetRealStream([DHDataCenter sharedInstance]->nDPHandle_,                                   &nRecordSeq,                                   &streamInfo,                                   mediaCallback,                                   nil,                                   5000);    iRecordPort = [[PlayerManager sharedInstance] getFreePort];    PLAY_OpenStream(iRecordPort, Nil, 0, 2000*1024);    DHVideoWnd* hWnd = [[DHVideoWnd alloc]init];    PLAY_Play(iRecordPort, (__bridge void *)(hWnd));    BOOL bRet = PLAY_StartDataRecord(iRecordPort, (char *)[strFilePath UTF8String], 1);    return bRet;}- (BOOL)stopRecord{     DPSDK_CloseRealStreamBySeq([DHDataCenter sharedInstance]->nDPHandle_,                               nRecordSeq,                               5000);     BOOL bRet = PLAY_StopDataRecord(iRecordPort);     bRet = PLAY_CloseStream(iRecordPort);     bRet = PLAY_Stop(iRecordPort);     bRet = PLAY_ReleasePort(iRecordPort);     nRecordSeq = 0;     return bRet;}- (bool)doSnap{        NSString* strMediaCenterPath = nil;        NSString *documentsDirectory = [DHPubfun documentFolder];    strMediaCenterPath = [documentsDirectory stringByAppendingPathComponent:@"Media"];        NSDateFormatter *format = [[NSDateFormatter alloc] init];    [format setDateFormat:@"yyyyMMdd"];    NSString* localString = [format stringFromDate:[NSDate date]];        // 日期        NSFileManager* fileManage = [NSFileManager defaultManager];    NSError* pError;        [fileManage createDirectoryAtPath:strMediaCenterPath withIntermediateDirectories:YES attributes:nil error:&pError];        NSString* strCapturePath = [strMediaCenterPath stringByAppendingPathComponent:localString];        [fileManage createDirectoryAtPath:strCapturePath withIntermediateDirectories:YES attributes:nil error:&pError];        [format setDateFormat:@"yyyyMMddHHmmssSSS"];    localString = [format stringFromDate:[NSDate date]];        NSString* strFileName = [NSString stringWithFormat:@"%s.jpg", [localString UTF8String]];        NSString* strFilePath = [strCapturePath stringByAppendingPathComponent:strFileName] ;    BOOL bRet = PLAY_CatchPicEx(iRealplayPort, (char *)[strFilePath UTF8String], PicFormat_JPEG);    if (bRet)    {        UIImage* origPicture = [UIImage imageWithContentsOfFile:strFilePath];                // Note：save to camera roll is async, so the later item may copy complete than previous item        UIImageWriteToSavedPhotosAlbum(origPicture, self, @selector(image:didFinishSavingWithError:contextInfo:), NULL);    }        return bRet;}- (int)ptzDirection:(dpsdk_ptz_direct_e)direction byStep:(int)step stop:(BOOL)stop{    Ptz_Direct_Info_t ptzInfo = {sizeof(Ptz_Direct_Info_t)};    ptzInfo.nDirect = direction;    ptzInfo.nStep = 5;    ptzInfo.bStop = stop;    strcpy(ptzInfo.szCameraId, [[DHDataCenter sharedInstance].channelID UTF8String]);    int nRet = DPSDK_PtzDirection([DHDataCenter sharedInstance]->nDPHandle_,                                  &ptzInfo,                                  [DHDataCenter sharedInstance].nTimeout);    return nRet;}- (int)ptzCamara:(dpsdk_camera_operation_e)operation byStep:(int)step stop:(BOOL)stop{    Ptz_Operation_Info_t ptzInfo = { sizeof(Ptz_Operation_Info_t)};    ptzInfo.nOperation = operation;    ptzInfo.nStep = step;    ptzInfo.bStop = stop;    strcpy(ptzInfo.szCameraId, [[DHDataCenter sharedInstance].channelID UTF8String]);        int nRet = DPSDK_PtzCameraOperation([DHDataCenter sharedInstance]->nDPHandle_,                                        &ptzInfo,                                        [DHDataCenter sharedInstance].nTimeout);    return nRet;}- (NSMutableArray*)ptzQueryPrePoint{    Ptz_Prepoint_Info_t prePoint = {0};    strcpy(prePoint.szCameraId, [[DHDataCenter sharedInstance].channelID UTF8String]);    int nRet = DPSDK_QueryPrePoint([DHDataCenter sharedInstance]->nDPHandle_, &prePoint, [DHDataCenter sharedInstance].nTimeout);    NSMutableArray *pointArray = [NSMutableArray arrayWithCapacity:2];    if (nRet == 0) {        for (int i = 0; i < prePoint.nCount; i++) {            PtzSinglePrepointInfo *pointInfo = [[PtzSinglePrepointInfo alloc] init];            Ptz_Single_Prepoint_Info_t prePoint_info_t = prePoint.pPoints[i];            pointInfo.code = prePoint_info_t.nCode;            pointInfo.name = [[NSString alloc] initWithUTF8String: prePoint_info_t.szName];            [pointArray addObject:pointInfo];        }    }    return pointArray;}- (int)ptzPrePoint:(dpsdk_ptz_prepoint_cmd_e)operation prePoint:(PtzSinglePrepointInfo*)pointInfo{    Ptz_Prepoint_Operation_Info_t prePointOperation = { sizeof(Ptz_Prepoint_Operation_Info_t)};    strcpy(prePointOperation.szCameraId, [[DHDataCenter sharedInstance].channelID UTF8String]);    Ptz_Single_Prepoint_Info_t single_prepoint_info_t = { sizeof(Ptz_Single_Prepoint_Info_t)};    single_prepoint_info_t.nCode = pointInfo.code;    strcpy(single_prepoint_info_t.szName, [pointInfo.name UTF8String]);    prePointOperation.nCmd = operation;    prePointOperation.pPoints = single_prepoint_info_t;    int nRet = DPSDK_PtzPrePointOperation([DHDataCenter sharedInstance]->nDPHandle_, &prePointOperation, [DHDataCenter sharedInstance].nTimeout);    return nRet;}- (void)image:(UIImage *)image didFinishSavingWithError:(NSError *)error contextInfo:(void *)contextInfo;{    }@end